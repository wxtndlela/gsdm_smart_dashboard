{"version":3,"sources":["webpack:///src/app/pages/segments/segments.component.html","webpack:///src/app/pages/segments/segments.module.ts","webpack:///src/app/pages/segments/segments.component.ts","webpack:///src/app/pages/segments/segments.component.scss"],"names":["routes","path","component","SegmentsModule","declarations","imports","forChild","SegmentsComponent","modalController","db","db_m","route","http","sanitizer","alertCtrl","global","Offline","storage","location_services","loadingCtrl","Markers","SegmantData","uploadmedia","viewType","showMap","offlinemode","downloading","offlinemedia","totalIncr","percDownload","host","opentype","show_info","show_list","SegmentMediaOnline","current_roadid","opencnt","self","progessStage","searchQuery","slideOpts","initialSlide","speed","slidesPerView","media_url","isbusy","checkInternetAvailability","setInterval","attachMessageListener","console","log","loadDetails","setTimeout","isInternetAvailable","showSync","get","then","_data","_segments","set","detachMessageListener","window","addEventListener","handleMessageEvent","removeEventListener","event","message","data","type","roadID","roadid","find","obj","road_id","foundObject","coords","geometry","fin_coords","i","length","_res","res","replace","push","outputArray","map","item","split","lng","lat","parseFloat","segrec_id","id","streetName","street_name","VCI","road_len","route_seq","start_len","st_length","end_km","munic","municipality","start_km","latitude","longitude","loadSegmentMedia","getMediaForOffline","Segments","subscribe","val","mapSrc","bypassSecurityTrustResourceUrl","getAll","downloadURL","fileName","fetch","response","blob","error","_url","_fileName","total_length","apiUrl","requestData","url","fname","post","Number","toFixed","len","SegmentMediaArray","cnt","type_","includes","gotoDownload_script","media_name","_tmpMediaDownloaded","ret","_replace","_fname","String","substring","mid","mtype","murl","getSegment","create","cssClass","componentProps","title","offline","segment","modal","present","SegmentMedia","getSegmentMedia","detail","value","open_segmentrecorder","rectype","loadSegmentData","polygon","google","maps","Polyline","strokeColor","strokeOpacity","strokeWeight","me","name","location","osm_geocode_latlng","displayname","display_name","roundedNum","Math","round","showpercent","file","target","files","filepath","task","upload","uploadPercent","percentageChanges","snapshotChanges","pipe","ref","getDownloadURL","forEach","slice","indexOf","addSegmentMediaNow","filter","toLowerCase","_gps","medianame","mediatype","mediaurl","now","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","dt","segmentMedia","user_id","localStorage","getItem","media_type","addedondatetime","enabled","approved","selector","template"],"mappings":"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","file":"pages-segments-segments-module-es5.js","sourcesContent":["export default \"<ion-content #cont>\\n  <div class=\\\"download\\\" *ngIf=\\\"downloading == true\\\">\\n    Please wait while downloading ... {{ percDownload }}&nbsp;%\\n  </div>\\n  <div\\n    class=\\\"container-fluid page-body-wrapper\\\"\\n    style=\\\"min-height: 100%; padding-top: 0%\\\"\\n    *ngIf=\\\"downloading == false\\\"\\n  >\\n    <div class=\\\"main-panel-only w-100\\\">\\n      <div class=\\\"page-header\\\">\\n        <div class=\\\"col-md-6\\\">\\n          <h3 class=\\\"page-title\\\">Segments Found [{{ _segments.length }}]</h3>\\n        </div>\\n\\n        <!-- <div *ngIf=\\\"show_info\\\" class=\\\"col-md-6 info\\\">\\n          Segment ID:&nbsp;&nbsp;{{ current_roadid }}\\n          <div>Address:&nbsp;&nbsp;{{ displayname }}</div>\\n        </div> -->\\n      </div>\\n      <div class=\\\"col-md-12\\\" *ngIf=\\\"show_list\\\">\\n        <div class=\\\"input-group\\\">\\n          <div class=\\\"input-group-prepend bg-transparent\\\">\\n            <i class=\\\"input-group-text border-0 mdi mdi-magnify\\\"></i>\\n          </div>\\n          <input\\n            type=\\\"text\\\"\\n            class=\\\"form-control border-0\\\"\\n            placeholder=\\\"Find Link/Segment\\\"\\n            [(ngModel)]=\\\"searchQuery\\\"\\n          />\\n        </div>\\n\\n        <div class=\\\"list-group list-group-light space\\\">\\n          <a\\n            *ngFor=\\\"let item of filteredItems\\\"\\n            class=\\\"list-group-item list-group-item-action px-3 border-0\\\"\\n            aria-current=\\\"true\\\"\\n            (click)=\\\"itemClicked(item)\\\"\\n          >\\n            {{ item.municipality }}&nbsp;&nbsp;|&nbsp;&nbsp;{{\\n              item.road_id\\n            }}&nbsp;&nbsp;|&nbsp;&nbsp;{{ item.surfacetype }}</a\\n          >\\n        </div>\\n      </div>\\n\\n      <div class=\\\"row\\\">\\n        <!--MAP-->\\n        <!-- <div\\n          *ngIf=\\\"showMap && offlinemode == false\\\"\\n          class=\\\"col-md-12 grid-margin\\\"\\n        >\\n          <div class=\\\"card\\\" id=\\\"map_canvas_segments\\\" style=\\\"height: 85vh\\\"></div>\\n        </div> -->\\n        <div *ngIf=\\\"showMap\\\" class=\\\"iframe-container\\\">\\n          <div class=\\\"main-iframe\\\">\\n            <iframe\\n              [src]=\\\"mapSrc\\\"\\n              allow=\\\"microphone; camera; autoplay\\\"\\n              allowfullscreen\\n            ></iframe>\\n          </div>\\n        </div>\\n\\n        <!--SEGEMENT DETAILS-->\\n        <div *ngIf=\\\"!showMap\\\" class=\\\"col-md-12 grid-margin stretch-card\\\">\\n          <div class=\\\"card\\\">\\n            <div class=\\\"card-body\\\">\\n              <h4 class=\\\"card-title\\\">Physical Location:</h4>\\n              <p class=\\\"card-description\\\" *ngIf=\\\"roadID\\\">\\n                Coordinates :{{ latitude }}, {{ longitude }}\\n                <br />\\n                Address: <br /><span\\n                  style=\\\"font-size: 12px; font-style: italic\\\"\\n                  >{{ displayname }}</span\\n                >\\n              </p>\\n\\n              <p class=\\\"card-description\\\" *ngIf=\\\"!roadID\\\">\\n                Coordinates :--No Link Selected--\\n                <br />\\n                Address : --No Link Selected--\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">Road / Link ID:</h4>\\n              <p class=\\\"card-description road-id\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ roadID }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">Street Name:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"streetName\\\">{{ streetName }}</span>\\n                <span *ngIf=\\\"!streetName\\\">Name Not Found</span><br />\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">Municipality:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ munic }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">VCI:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ VCI }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">Start Length:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ start_len }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">Start KMs:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ start_km }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">End KMs:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ end_km }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">Road Length:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ road_len }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <h4 class=\\\"card-title\\\">Route Seq:</h4>\\n              <p class=\\\"card-description\\\">\\n                <span *ngIf=\\\"roadID\\\">{{ route_seq }}</span>\\n                <span *ngIf=\\\"!roadID\\\">--No Link Selected--</span>\\n              </p>\\n\\n              <p *ngIf=\\\"roadID\\\" class=\\\"card-title\\\">\\n                <label for=\\\"choose\\\" class=\\\"text-color\\\"\\n                  >Choose what you want to do</label\\n                >\\n                <ion-select\\n                  class=\\\"form-control\\\"\\n                  value=\\\"select\\\"\\n                  (ionChange)=\\\"getViewType($event)\\\"\\n                  okText=\\\"Okay\\\"\\n                  cancelText=\\\"Dismiss\\\"\\n                  id=\\\"choose\\\"\\n                >\\n                  <ion-select-option value=\\\"viewmedia\\\"\\n                    >Go to Assessment</ion-select-option\\n                  >\\n                  <ion-select-option\\n                    *ngIf=\\\"\\n                      (global.userRole == 'Administrator' ||\\n                        global.userRole == 'Road Inspection') &&\\n                      offlinemode == false\\n                    \\\"\\n                    value=\\\"uploadmedia\\\"\\n                    >Upload Inspection</ion-select-option\\n                  >\\n                  <ion-select-option\\n                    *ngIf=\\\"\\n                      (global.userRole == 'Administrator' ||\\n                        global.userRole == 'Road Inspection') &&\\n                      offlinemode == false\\n                    \\\"\\n                    value=\\\"recondevice\\\"\\n                    >Record (Device Cam)</ion-select-option\\n                  >\\n                  <ion-select-option\\n                    *ngIf=\\\"\\n                      (global.userRole == 'Administrator' ||\\n                        global.userRole == 'Road Inspection') &&\\n                      offlinemode == false\\n                    \\\"\\n                    value=\\\"rec3d\\\"\\n                    >Record (3D Cam)</ion-select-option\\n                  >\\n                </ion-select>\\n              </p>\\n\\n              <div *ngIf=\\\"viewType == 'uploadmedia'\\\" class=\\\"form-group\\\">\\n                <label for=\\\"uploadmedia\\\" class=\\\"text-color\\\"\\n                  >Upload Link Videos/Images</label\\n                >\\n\\n                <ion-select\\n                  class=\\\"form-control\\\"\\n                  value=\\\"select\\\"\\n                  (ionChange)=\\\"getMediaType($event)\\\"\\n                  okText=\\\"Okay\\\"\\n                  cancelText=\\\"Dismiss\\\"\\n                  id=\\\"uploadmedia\\\"\\n                >\\n                  <ion-select-option value=\\\"vid3d\\\">Video(3D)</ion-select-option>\\n                  <ion-select-option value=\\\"vid\\\"\\n                    >Video(Normal)</ion-select-option\\n                  >\\n                  <ion-select-option value=\\\"img\\\">Image</ion-select-option>\\n                </ion-select>\\n\\n                <input\\n                  *ngIf=\\\"uploadmedia !== '' && !isbusy\\\"\\n                  (change)=\\\"select_file($event)\\\"\\n                  [accept]=\\\"opentype\\\"\\n                  type=\\\"file\\\"\\n                  class=\\\"form-control\\\"\\n                  id=\\\"uploadvideo\\\"\\n                  placeholder=\\\"photo\\\"\\n                />\\n                <div class=\\\"hide\\\" *ngIf=\\\"uploadPercent | async as percent\\\">\\n                  Uploading: {{ getValue(percent) }}%\\n                  <ion-progress-bar [value]=\\\"percent\\\"></ion-progress-bar>\\n                </div>\\n\\n                <ion-button *ngIf=\\\"isbusy\\\" color=\\\"light\\\" expand=\\\"block\\\">{{\\n                  showpercent\\n                }}</ion-button>\\n              </div>\\n\\n              <div *ngIf=\\\"viewType == 'viewmedia'\\\">\\n                <ion-slides pager=\\\"true\\\" [options]=\\\"slideOpts\\\">\\n                  <ion-slide *ngFor=\\\"let item of SegmentMediaArray\\\">\\n                    <ion-title class=\\\"slide-title\\\">{{\\n                      item.media_name\\n                    }}</ion-title>\\n                    <!-- Add a title for the slide -->\\n                    <div\\n                      class=\\\"slide-content\\\"\\n                      (click)=\\\"\\n                        open_inspection(\\n                          item.road_id,\\n                          item.id,\\n                          item.media_type,\\n                          item.media_url\\n                        )\\n                      \\\"\\n                    >\\n                      <img\\n                        *ngIf=\\\"item.media_type == 'vid'\\\"\\n                        src=\\\"assets/images/vid.jpg\\\"\\n                        width=\\\"100%\\\"\\n                      />\\n                      <img\\n                        *ngIf=\\\"item.media_type == 'vid3d'\\\"\\n                        src=\\\"assets/images/vid3d.jpg\\\"\\n                        width=\\\"100%\\\"\\n                      />\\n                      <img\\n                        *ngIf=\\\"item.media_type == 'img'\\\"\\n                        src=\\\"assets/images/img.jpg\\\"\\n                        width=\\\"100%\\\"\\n                      />\\n                    </div>\\n                  </ion-slide>\\n                </ion-slides>\\n              </div>\\n              <div class=\\\"col-md-12\\\">\\n                <ion-grid>\\n                  <ion-row>\\n                    <ion-col>\\n                      <ion-button\\n                        *ngIf=\\\"!isbusy\\\"\\n                        expand=\\\"block\\\"\\n                        (click)=\\\"gotoMap(true)\\\"\\n                        >Go Back</ion-button\\n                      >\\n                    </ion-col>\\n                    <ion-col *ngIf=\\\"offlinemode == false\\\">\\n                      <ion-button\\n                        color=\\\"warning\\\"\\n                        *ngIf=\\\"!isbusy\\\"\\n                        expand=\\\"block\\\"\\n                        (click)=\\\"gotoDownload()\\\"\\n                        >Download Offline Media</ion-button\\n                      >\\n                    </ion-col>\\n                  </ion-row>\\n                </ion-grid>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- main-panel ends -->\\n  </div>\\n\\n  <!-- page-body-wrapper ends -->\\n</ion-content>\\n\";","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { SegmentsComponent } from \"./segments.component\";\nimport { FormsModule } from \"@angular/forms\";\n\nconst routes: Routes = [{ path: \"\", component: SegmentsComponent }];\n\n@NgModule({\n  declarations: [SegmentsComponent],\n  imports: [CommonModule, FormsModule, RouterModule.forChild(routes)],\n})\nexport class SegmentsModule {}\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  OnDestroy,\n  HostListener,\n} from \"@angular/core\";\nimport * as map_style from \"../../../providers/map.styles\";\nimport { Segments, SegmentMedia } from \"../../../services/db\";\nimport { AddSegment, AddSegmentMediaModal } from \"../../../providers\";\nimport { InspectionComponent } from \"../../pages/inspection/inspection.component\";\nimport { SegmentRecorderComponent } from \"../../pages/segment-recorder/segment-recorder.component\";\nimport {\n  PopoverController,\n  ModalController,\n  AlertController,\n  LoadingController,\n  NavController,\n} from \"@ionic/angular\";\nimport { GeolocationService } from \"../../../services/geolocation.service\";\nimport { FirebaseStorage } from \"../../../services/firebase.storage.service\";\n//import { AngularFireStorage } from \"@angular/fire/storage\";\nimport { AngularFireStorage } from \"@angular/fire/storage\";\nimport { Observable } from \"rxjs\";\nimport { finalize } from \"rxjs/operators\";\nimport { GlobalSettings } from \"../../../services/global.service\";\nimport { Storage } from \"@ionic/storage-angular\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { saveAs } from \"file-saver\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { DomSanitizer, SafeResourceUrl } from \"@angular/platform-browser\";\n\nimport { interval } from \"rxjs\";\nimport { take } from \"rxjs/operators\";\n\n@Component({\n  selector: \"app-segments\",\n  templateUrl: \"./segments.component.html\",\n  styleUrls: [\"./segments.component.scss\"],\n})\nexport class SegmentsComponent implements OnInit {\n  @ViewChild(\"fileInput\") fileInput: ElementRef;\n\n  //map: google.maps.Map;\n  //Segments: any;\n  SegmentMediaArray: any;\n  SegmentArray: any;\n  Markers: any[] = [];\n  SegmantData: any[] = [];\n  latitude: number;\n  longitude: number;\n  surburb: any;\n  postalCode: any;\n  city: any;\n  province: any;\n  myV: string;\n  uploadmedia: any = \"\";\n  viewType: any = \"\";\n  showMap: boolean = true;\n  offlinemode: boolean = false;\n  downloading: boolean = false;\n  offlinemedia: any[] = [];\n  totalIncr: number = 0;\n  percDownload: number = 0;\n  host: any = \"localhost\";\n\n  //media_url: any;\n  opentype: any = \"\";\n  show_info: boolean = false;\n  show_list: boolean = false;\n  SegmentMediaOnline: boolean = false;\n  current_roadid: any = \"\";\n  isInternetAvailable: boolean;\n\n  opencnt: any = 0;\n\n  // Create a reference to the class instance\n  self = this;\n  file: string | ArrayBuffer;\n\n  streetName: string;\n  roadID: string;\n  munic: string;\n  start_km: string;\n  end_km: string;\n  VCI: string;\n  geometry: string[];\n  road_len: string;\n  route_seq: string;\n  start_len: string;\n  timerId: any;\n  displayname: any;\n  showpercent: any;\n  progessStage: any = \"\";\n  _segments: any;\n  searchQuery: string = \"\";\n\n  slideOpts = {\n    initialSlide: 0,\n    speed: 400,\n    slidesPerView: 4,\n  };\n\n  media_url: string = \"\";\n  isbusy: boolean = false;\n\n  uploadPercent: any;\n  downloadURL: any;\n  segrec_id: any;\n  mapSrc: SafeResourceUrl;\n\n  constructor(\n    private modalController: ModalController,\n    private db: Segments,\n    private db_m: SegmentMedia,\n    private route: ActivatedRoute,\n    private http: HttpClient,\n    private sanitizer: DomSanitizer,\n    private alertCtrl: AlertController,\n    private global: GlobalSettings,\n    //private storage: FirebaseStorage,\n    public Offline: Storage,\n    private storage: AngularFireStorage,\n    private location_services: GeolocationService,\n    private loadingCtrl: LoadingController\n  ) {\n    this.checkInternetAvailability();\n\n    setInterval(() => {\n      this.checkInternetAvailability();\n    }, 2000);\n  }\n\n  ngOnInit(): void {\n    this.attachMessageListener();\n    console.log(\"Loading Segment Details\");\n    //this.load_map();\n    this.loadDetails();\n\n    setTimeout(() => {\n      if (this.isInternetAvailable == false) {\n        //Offline\n        //console.log(\"--No Internet--\");\n        this.global.showSync = false;\n        this.Offline.get(\"DATA\").then((_data) => {\n          this._segments = _data;\n          this.show_list = false;\n          this.offlinemode = true;\n        });\n      } else {\n        //Online\n        this.global.showSync = true;\n        this.Offline.set(\"DATA\", this._segments);\n        this.offlinemode = false;\n\n        //console.log(this._segments[0]);\n      }\n    }, 5000);\n  }\n\n  ngOnDestroy() {\n    // Remove the message event listener when the component is destroyed\n\n    this.detachMessageListener();\n  }\n\n  attachMessageListener() {\n    // Add event listener to listen for messages from the iframe\n\n    window.addEventListener(\"message\", this.handleMessageEvent);\n  }\n\n  detachMessageListener() {\n    // Remove event listener when the component is destroyed\n\n    window.removeEventListener(\"message\", this.handleMessageEvent);\n  }\n\n  @HostListener(\"window:message\", [\"$event\"])\n  handleMessageEvent(event: MessageEvent) {\n    // Ensure the message is coming from a trusted source\n\n    // You can check event.origin and validate it against your expected iframe origin\n\n    // Handle the received message\n\n    const message = event.data;\n    if (message.type === \"clickEvent\") {\n      setTimeout(async () => {\n        const roadID = message.data.roadid;\n        // Perform actions based on the received click data\n        console.log(\"Click event received from Map:\", roadID);\n        //this.mapClickedSegment(roadID);\n        const foundObject = await this._segments.find(\n          (obj) => obj.road_id === roadID\n        );\n        //console.log(\"SEG:\", foundObject.geometry[0]);\n        let coords = foundObject.geometry;\n        let fin_coords = [];\n        for (let i = 0; i < coords.length; i++) {\n          let _res = [];\n          let res = \"lng:\" + coords[i];\n          res = res.replace(\",\", \",lat:\");\n\n          fin_coords.push(res);\n        }\n\n        const outputArray = fin_coords.map((item: string) => {\n          const [lng, lat] = item.split(\",\");\n          return {\n            lng: parseFloat(lng.split(\":\")[1]),\n            lat: parseFloat(lat.split(\":\")[1]),\n          };\n        });\n        this.show_info = false;\n\n        this.current_roadid = this.uploadmedia = \"\";\n        this.viewType = \"\";\n        this.segrec_id = foundObject.id;\n        this.streetName = foundObject.street_name;\n        this.roadID = foundObject.road_id;\n        this.VCI = foundObject.VCI;\n        this.road_len = foundObject.road_len;\n        this.route_seq = foundObject.route_seq;\n        this.start_len = foundObject.st_length;\n        this.end_km = foundObject.end_km;\n        this.munic = foundObject.municipality;\n        this.start_km = foundObject.start_km;\n        this.latitude = outputArray[0][\"lat\"];\n        this.longitude = outputArray[0][\"lng\"];\n\n        this.showMap = false;\n        await this.loadSegmentMedia(this.roadID);\n        await this.getMediaForOffline(this.roadID);\n      }, 1000);\n    }\n  }\n\n  // async mapClickedSegment(_segmentid) {\n  //   const foundObject = await this._segments.find(\n  //     (obj) => obj.road_id === _segmentid\n  //   );\n  //   //console.log(\"SEG:\", foundObject.geometry[0]);\n  //   let coords = foundObject.geometry;\n  //   let fin_coords = [];\n  //   for (let i = 0; i < coords.length; i++) {\n  //     let _res = [];\n  //     let res = \"lng:\" + coords[i];\n  //     res = res.replace(\",\", \",lat:\");\n\n  //     fin_coords.push(res);\n  //   }\n\n  //   const outputArray = fin_coords.map((item: string) => {\n  //     const [lng, lat] = item.split(\",\");\n  //     return {\n  //       lng: parseFloat(lng.split(\":\")[1]),\n  //       lat: parseFloat(lat.split(\":\")[1]),\n  //     };\n  //   });\n  //   this.show_info = false;\n\n  //   this.current_roadid = this.uploadmedia = \"\";\n  //   this.viewType = \"\";\n  //   this.segrec_id = foundObject.id;\n  //   this.streetName = foundObject.street_name;\n  //   this.roadID = foundObject.road_id;\n  //   this.VCI = foundObject.VCI;\n  //   this.road_len = foundObject.road_len;\n  //   this.route_seq = foundObject.route_seq;\n  //   this.start_len = foundObject.st_length;\n  //   this.end_km = foundObject.end_km;\n  //   this.munic = foundObject.municipality;\n  //   this.start_km = foundObject.start_km;\n  //   this.latitude = outputArray[0][\"lat\"];\n  //   this.longitude = outputArray[0][\"lng\"];\n\n  //   this.showMap = false;\n  //   await this.loadSegmentMedia(this.roadID);\n  //   await this.getMediaForOffline(this.roadID);\n  // }\n\n  loadDetails() {\n    this.db.Segments.subscribe((val) => {\n      this._segments = val;\n      //console.log(val[0]);\n\n      // if (this._segments.length > 0) {\n      this.mapSrc = this.sanitizer.bypassSecurityTrustResourceUrl(\n        \"http://\" + this.host + \":3000/map\"\n      );\n      //this.load_map();\n      //}\n    });\n    this.db.getAll();\n  }\n\n  async downloadFileFromStorage(downloadURL: string, fileName: string) {\n    try {\n      // Fetch the file and create a blob\n      const response = await fetch(downloadURL);\n      const blob = await response.blob();\n\n      // Save the blob as a file using the FileSaver library\n      saveAs(blob, fileName);\n      console.log(\"Downloaded: \", fileName);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n    }\n  }\n\n  async gotoDownload_script(\n    _url: any,\n    _fileName: string,\n    total_length: number\n  ) {\n    const apiUrl = \"http://localhost:3000/run-script\";\n    // Replace with your server's URL\n\n    const requestData = { url: _url, fname: _fileName, road_id: this.roadID };\n\n    // Customize the data you want to send to the server\n\n    this.http.post(apiUrl, requestData).subscribe(\n      (res) => {\n        if (res) {\n          this.totalIncr += 1;\n\n          //Store local file paths to ARRAY\n          this.offlinemedia.push(\n            \"./assets/media/\" + this.roadID + \"/\" + _fileName\n          );\n          if (this.totalIncr >= total_length) {\n            this.downloading = false;\n            //Store file path ARRAY to offline storage\n            this.Offline.set(this.roadID, this.offlinemedia);\n            //console.log(\"Media:\", this.offlinemedia);\n          } else {\n            this.downloading = true;\n          }\n        }\n        this.percDownload = Number(\n          ((this.totalIncr / total_length) * 100).toFixed(1)\n        );\n\n        // Handle any further actions or responses from the server\n      },\n\n      (error) => {\n        console.error(\"Error executing Download script:\", error);\n\n        // Handle the error condition if necessary\n      }\n    );\n    return 0;\n  }\n\n  async gotoDownload() {\n    this.downloading = true;\n    this.totalIncr = 0;\n\n    let len = this.SegmentMediaArray.length;\n    let cnt = 0;\n    this.offlinemedia = [];\n\n    while (cnt < len) {\n      let type_ = \"\";\n\n      if (this.SegmentMediaArray[cnt].media_url.includes(\".png\")) {\n        type_ = \".png\";\n      } else if (this.SegmentMediaArray[cnt].media_url.includes(\".jpeg\")) {\n        type_ = \".jpeg\";\n      } else if (this.SegmentMediaArray[cnt].media_url.includes(\".jpg\")) {\n        type_ = \".jpg\";\n      } else if (this.SegmentMediaArray[cnt].media_url.includes(\".mp4\")) {\n        type_ = \".mp4\";\n      }\n\n      await this.gotoDownload_script(\n        this.SegmentMediaArray[cnt].media_url,\n        this.SegmentMediaArray[cnt].media_name + type_,\n        len\n      );\n\n      cnt += 1;\n    }\n  }\n\n  async getMediaForOffline(roadID) {\n    setTimeout(() => {\n      //console.log(\"OFF:\", this.SegmentMediaOnline);\n      if (this.isInternetAvailable == false) {\n        //Offline\n        //console.log(\"--No Internet--\");\n\n        this.Offline.get(\"M-\" + roadID).then((_data) => {\n          this.SegmentMediaArray = _data;\n          this.offlinemode = true;\n\n          let _tmpMediaDownloaded = [];\n\n          //Retrieve a list of media links that were downloaded\n          this.Offline.get(roadID).then((ret) => {\n            _tmpMediaDownloaded = ret;\n            console.log(_tmpMediaDownloaded);\n            let cnt = 0;\n            let len = _tmpMediaDownloaded.length;\n            while (cnt < len) {\n              let _replace = \"./assets/media/\" + roadID + \"/\";\n              let _fname = String(\n                _tmpMediaDownloaded[cnt].replace(_replace, \"\")\n              );\n              _fname = _fname.substring(0, _fname.length - 4);\n\n              //Find matching record by media_name\n              const foundObject = this.SegmentMediaArray.find(\n                (obj) => obj.media_name === _fname\n              );\n              if (foundObject) {\n                //If found, then replace cloud url with local\n                foundObject.media_url = _tmpMediaDownloaded[cnt];\n              }\n\n              cnt += 1;\n            }\n          });\n        });\n      } else {\n        //Online\n\n        this.Offline.set(\"M-\" + roadID, this.SegmentMediaArray);\n        this.offlinemode = false;\n        //console.log(\"MEDIA:\", this.SegmentMediaArray);\n\n        //Assume Offline\n      }\n    }, 5000);\n  }\n\n  async loadSegmentData(road_id, mid, mtype, murl) {\n    (await this.db.getSegment(road_id)).subscribe(\n      async (data: AddSegment[]) => {\n        if (this.opencnt < 1) {\n          if (data.length > 0) {\n            //We are online\n            const modal = await this.modalController.create({\n              component: InspectionComponent,\n              cssClass: \"modal-full\",\n              componentProps: {\n                title: \"Open Inspection\",\n                segrec_id: this.segrec_id,\n                roadid: data[0][\"road_id\"],\n                mid: mid,\n                murl: murl,\n                offline: false,\n                mtype: mtype,\n                segment: data[0],\n              },\n            });\n\n            await modal.present();\n          } else {\n            //Offline /\n            //Find matching record by road_id\n            const foundObject = this._segments.find(\n              (obj) => obj.road_id === road_id\n            );\n            if (foundObject) {\n              const modal = await this.modalController.create({\n                component: InspectionComponent,\n                cssClass: \"modal-full\",\n                componentProps: {\n                  title: \"Open Inspection\",\n                  segrec_id: this.segrec_id,\n                  roadid: foundObject.road_id,\n                  mid: murl, //Insert real media URL if we are working offline\n                  murl: \"\",\n                  offline: true,\n                  mtype: mtype,\n                  segment: foundObject,\n                },\n              });\n\n              await modal.present();\n            }\n          }\n\n          this.opencnt += 1;\n        }\n      }\n    );\n  }\n\n  loadSegmentMedia(road_id) {\n    //This gets the segment related media\n    this.db_m.SegmentMedia.subscribe((val) => {\n      this.SegmentMediaOnline = true;\n      this.SegmentMediaArray = val;\n    });\n    this.db_m.getSegmentMedia(road_id);\n  }\n\n  ionViewDidEnter() {\n    this.loadDetails();\n  }\n\n  getViewType(event: CustomEvent) {\n    this.viewType = event.detail.value;\n    if (this.viewType == \"recondevice\") {\n      this.open_segmentrecorder(this.roadID, \"recondevice\");\n    }\n    if (this.viewType == \"rec3d\") {\n      this.open_segmentrecorder(this.roadID, \"rec3d\");\n    }\n  }\n\n  getMediaType(event: CustomEvent) {\n    this.uploadmedia = event.detail.value;\n\n    if (this.uploadmedia == \"vid3d\" || this.uploadmedia == \"vid\") {\n      this.opentype = \"video/*\";\n    } else {\n      this.opentype = \"image/*\";\n    }\n    console.log(this.opentype);\n  }\n\n  async open_segmentrecorder(roadid, rectype) {\n    const modal = await this.modalController.create({\n      component: SegmentRecorderComponent,\n      cssClass: \"modal-full\",\n      componentProps: {\n        title: \"Open Recorder\",\n        roadid: roadid,\n        rectype: rectype,\n      },\n    });\n\n    await modal.present();\n  }\n\n  async open_inspection(roadid, mid, mtype, murl) {\n    this.opencnt = 0;\n    await this.loadSegmentData(roadid, mid, mtype, murl);\n  }\n\n  /**\n   * load_map\n   */\n  public async load_map() {\n    // this.latitude = Number(\"-26.651596892582404\");\n    // this.longitude = Number(\"28.618020684007547\");\n    // this.map = new google.maps.Map(\n    //   document.getElementById(\"map_canvas_segments\"),\n    //   {\n    //     center: { lat: this.latitude, lng: this.longitude },\n    //     zoom: 12,\n    //     zoomControl: true,\n    //     mapTypeControl: false,\n    //     fullscreenControl: true,\n    //     streetViewControl: true,\n    //     streetViewControlOptions: {\n    //       position: google.maps.ControlPosition.RIGHT_BOTTOM,\n    //     },\n    //     zoomControlOptions: {\n    //       position: google.maps.ControlPosition.LEFT_BOTTOM,\n    //     },\n    //     fullscreenControlOptions: {\n    //       position: google.maps.ControlPosition.BOTTOM_RIGHT,\n    //     },\n    //   }\n    // );\n    // const loading = await this.loadingCtrl.create({\n    //   message: \"Loading Segments ...\",\n    // });\n    // loading.present();\n    // await this.addSegments(this.map);\n    // loading.dismiss();\n    // this.map.setMapTypeId(\"hybrid\");\n    // //this.getAddress();\n    // // this.add_marker({ lat: this.latitude, lng: this.longitude });\n    // this.map.addListener(\"click\", (mapsMouseEvent) => {\n    //   let location = {\n    //     lat: mapsMouseEvent.latLng.lat(),\n    //     lng: mapsMouseEvent.latLng.lng(),\n    //   };\n    //   // this.add_marker(location);\n    // });\n  }\n\n  async setSegment(coords) {\n    // Create a new polygon with the specified coordinates\n    const polygon = new google.maps.Polyline({\n      path: coords,\n      strokeColor: \"rgb(0, 195, 255)\",\n      strokeOpacity: 0.8,\n      strokeWeight: 5,\n    });\n\n    let me = 0;\n\n    // Add the polygon to the map\n    //polygon.setMap(this.map);\n  }\n\n  myFunction(name: string): void {}\n\n  async resetSegment(coords) {\n    // Create a new polygon with the specified coordinates\n    // const polygon = new google.maps.Polyline({\n    //   path: coords,\n    //   strokeColor: \"rgb(122, 17, 163)\",\n    //   strokeOpacity: 0.8,\n    //   strokeWeight: 5,\n    // });\n    // let me = 0;\n    // // Add the polygon to the map\n    // polygon.setMap(this.map);\n  }\n\n  async addSegments(map) {\n    // for (let i = 0; i < this._segments.length; i++) {\n    //   let coords = this._segments[i][\"geometry\"];\n    //   let fin_coords = [];\n    //   for (let i = 0; i < coords.length; i++) {\n    //     let _res = [];\n    //     let res = \"lng:\" + coords[i];\n    //     res = res.replace(\",\", \",lat:\");\n    //     fin_coords.push(res);\n    //   }\n    //   const outputArray = fin_coords.map((item: string) => {\n    //     const [lng, lat] = item.split(\",\");\n    //     return {\n    //       lng: parseFloat(lng.split(\":\")[1]),\n    //       lat: parseFloat(lat.split(\":\")[1]),\n    //     };\n    //   });\n    //   //console.log(outputArray);\n    //   // Create a new polygon with the specified coordinates\n    //   const polygon = new google.maps.Polyline({\n    //     path: outputArray,\n    //     strokeColor: \"rgb(122, 17, 163)\",\n    //     strokeOpacity: 0.8,\n    //     strokeWeight: 5,\n    //   });\n    //   let me = 0;\n    //   // Add the polygon to the map\n    //   //polygon.setMap(this.map);\n    //   // Add a click event listener to the polygon\n    //   //clearTimeout(this.timerId);\n    //   // Save the original stroke color of the polygon\n    //   const originalStrokeColor = polygon.get(\"strokeColor\");\n    //   // Add a mouseover listener to change the stroke color to pink\n    //   polygon.addListener(\"mouseover\", async () => {\n    //     polygon.setOptions({ strokeColor: \"pink\" });\n    //     this.current_roadid = this._segments[i][\"road_id\"];\n    //     this.show_info = true;\n    //     this.latitude = outputArray[0][\"lat\"];\n    //     this.longitude = outputArray[0][\"lng\"];\n    //     this.getAddress();\n    //   });\n    //   // Add a mouseout listener to reset the stroke color to the original color\n    //   polygon.addListener(\"mouseout\", async () => {\n    //     polygon.setOptions({ strokeColor: originalStrokeColor });\n    //     this.show_info = false;\n    //   });\n    //   polygon.addListener(\"click\", async () => {\n    //     this.show_info = false;\n    //     this.current_roadid = this.uploadmedia = \"\";\n    //     this.viewType = \"\";\n    //     this.segrec_id = this._segments[i][\"id\"];\n    //     this.streetName = this._segments[i][\"street_name\"];\n    //     this.roadID = this._segments[i][\"road_id\"];\n    //     this.VCI = this._segments[i][\"VCI\"];\n    //     this.road_len = this._segments[i][\"road_len\"];\n    //     this.route_seq = this._segments[i][\"route_seq\"];\n    //     this.start_len = this._segments[i][\"st_length\"];\n    //     this.end_km = this._segments[i][\"end_km\"];\n    //     this.munic = this._segments[i][\"municipality\"];\n    //     this.start_km = this._segments[i][\"start_km\"];\n    //     this.latitude = outputArray[0][\"lat\"];\n    //     this.longitude = outputArray[0][\"lng\"];\n    //     this.showMap = false;\n    //     await this.loadSegmentMedia(this.roadID);\n    //     await this.getMediaForOffline(this.roadID);\n    //     //this.setSegment(outputArray);\n    //     ///this.timerId = setTimeout(() => this.resetSegment(outputArray), 3000);\n    //     //clearTimeout(timerId);\n    //     //console.log(outputArray[0][\"lat\"]);\n    //   });\n    // }\n  }\n\n  async getAddress() {\n    let location = {\n      lat: this.latitude,\n      lng: this.longitude,\n    };\n    this.location_services.osm_geocode_latlng(location).subscribe((res) => {\n      console.log(res);\n\n      this.displayname = res.display_name;\n\n      // this.surburb = res.address.suburb;\n      // this.postalCode = res.address.postcode;\n      // this.city = res.address.city ? res.address.city : res.address.county;\n      // this.province = res.address.state;\n\n      // let name = `${res.address.road}, ${res.address.house_number}`;\n\n      //this.billboardForm.get('name').setValue(name)\n    });\n  }\n\n  getValue(val) {\n    const roundedNum = Math.round(val);\n    this.showpercent = \"Uploading...\" + roundedNum + \"%\";\n    return roundedNum;\n    //console.log(\"Progress: \" + roundedNum);\n  }\n\n  select_file(event) {\n    const file = event.target.files[0];\n    const filepath = \"road-inspection/\" + this.roadID + `/${file.name}`;\n    this.isbusy = true;\n    //this.progessStage = \"Uploading...\";\n    this.showpercent = \"Wait...\";\n\n    try {\n      const task = this.storage.upload(filepath, file);\n      // observe percentage changes\n      this.uploadPercent = task.percentageChanges();\n\n      // get notified when the download URL is available\n      task\n        .snapshotChanges()\n        .pipe(\n          finalize(async () => {\n            this.showpercent = \"Processing...\";\n            this.downloadURL = await this.storage\n              .ref(filepath)\n              .getDownloadURL()\n              .forEach(async (res) => {\n                console.log(res);\n                let media_name = String(file.name);\n                media_name = media_name.slice(0, media_name.indexOf(\".\"));\n                await this.addSegmentMediaNow(\n                  this.roadID,\n                  media_name,\n                  this.uploadmedia,\n                  res\n                );\n                this.isbusy = false;\n              });\n          })\n        )\n        .subscribe();\n    } catch (error) {\n      // handle the exception\n      console.error(error);\n      this.isbusy = false;\n    } finally {\n    }\n  }\n\n  get filteredItems(): string[] {\n    return this._segments.filter(\n      (item) =>\n        typeof item.road_id === \"string\" &&\n        item.road_id.toLowerCase().includes(this.searchQuery.toLowerCase())\n    );\n  }\n\n  async itemClicked(item) {\n    this.show_info = false;\n    this.show_list = false;\n    this.current_roadid = this.uploadmedia = \"\";\n    this.viewType = \"\";\n    this.segrec_id = item.id;\n    this.streetName = item.street_name;\n    this.roadID = item.road_id;\n    this.VCI = item.VCI;\n    this.road_len = item.road_len;\n    this.route_seq = item.route_seq;\n    this.start_len = item.st_length;\n    this.end_km = item.end_km;\n    this.munic = item.municipality;\n    this.start_km = item.start_km;\n\n    let _gps = item.geometry[0].split(\",\");\n\n    this.latitude = _gps[1];\n    this.longitude = _gps[0];\n\n    this.showMap = false;\n    await this.loadSegmentMedia(this.roadID);\n    await this.getMediaForOffline(this.roadID);\n  }\n\n  public gotoMap(res) {\n    if (res) {\n      this.loadDetails();\n    }\n    this.showMap = res;\n    setTimeout(() => {\n      if (this.isInternetAvailable == false) {\n        //Offline\n        //console.log(\"--No Internet--\");\n        this.Offline.get(\"DATA\").then((_data) => {\n          this._segments = _data;\n          //this.show_list = true;\n          this.offlinemode = true;\n        });\n      } else {\n        //Online\n        this.Offline.set(\"DATA\", this._segments);\n        this.offlinemode = false;\n        //console.log(this._segments[0]);\n      }\n    }, 5000);\n  }\n\n  async addSegmentMediaNow(roadid, medianame, mediatype, mediaurl) {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const day = String(now.getDate()).padStart(2, \"0\");\n    const hours = String(now.getHours()).padStart(2, \"0\");\n    const minutes = String(now.getMinutes()).padStart(2, \"0\");\n    const seconds = String(now.getSeconds()).padStart(2, \"0\");\n\n    const dt = `${year}${month}${day}${hours}${minutes}${seconds}`;\n    let segmentMedia: AddSegmentMediaModal = {\n      user_id: localStorage.getItem(\"uuid\"),\n      road_id: roadid,\n      media_name: medianame,\n      media_type: mediatype,\n      media_url: mediaurl,\n      addedondatetime: dt,\n      enabled: true,\n      approved: true,\n    };\n    await this.db_m.create(segmentMedia);\n  }\n\n  checkInternetAvailability() {\n    this.http.get(\"https://chappie-demo.novosense.africa:5000\").subscribe(\n      () => {\n        this.isInternetAvailable = true;\n\n        console.log(\"--Online--\");\n      },\n\n      () => {\n        this.isInternetAvailable = false;\n\n        console.log(\"--No Internet--\");\n      }\n    );\n  }\n}\n","export default \"ion-content {\\n  --ion-background-color: black;\\n}\\n\\n.text-color {\\n  color: white !important;\\n}\\n\\n.road-id {\\n  font-weight: bold;\\n  color: yellow;\\n}\\n\\n.hide {\\n  display: none;\\n}\\n\\n.slide-title {\\n  position: absolute;\\n  top: 0;\\n  left: 50%;\\n  transform: translateX(-50%);\\n  text-align: center;\\n  background-color: rgba(0, 0, 0, 0.7);\\n  color: #fff;\\n  padding: 10px;\\n  width: 100%;\\n  font-size: 12px;\\n  z-index: 1;\\n  text-transform: uppercase;\\n}\\n\\nimg {\\n  border-left: 1px solid #ccc;\\n}\\n\\n.info {\\n  color: #fff !important;\\n  font-size: 12px;\\n}\\n\\n.space {\\n  margin-top: 10px;\\n}\\n\\n.download {\\n  color: #ebb609;\\n  width: 100%;\\n  font-weight: lighter;\\n  font-size: 28px;\\n  text-align: center;\\n  margin-top: 20%;\\n}\\n\\n.iframe-container iframe {\\n  width: 100% !important;\\n  height: 100%;\\n  border: none;\\n}\\n\\n.iframe-container {\\n  height: 95vh;\\n  width: 100% !important;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.main-iframe {\\n  flex-grow: 1;\\n  height: 100%;\\n  width: 100% !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvc2VnbWVudHMvc2VnbWVudHMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSw2QkFBQTtBQUNGOztBQUNBO0VBQ0UsdUJBQUE7QUFFRjs7QUFBQTtFQUNFLGlCQUFBO0VBQ0EsYUFBQTtBQUdGOztBQUVBO0VBQ0UsYUFBQTtBQUNGOztBQUNBO0VBQ0Usa0JBQUE7RUFDQSxNQUFBO0VBQ0EsU0FBQTtFQUNBLDJCQUFBO0VBQ0Esa0JBQUE7RUFDQSxvQ0FBQTtFQUNBLFdBQUE7RUFDQSxhQUFBO0VBQ0EsV0FBQTtFQUNBLGVBQUE7RUFDQSxVQUFBO0VBQ0EseUJBQUE7QUFFRjs7QUFBQTtFQUNFLDJCQUFBO0FBR0Y7O0FBREE7RUFDRSxzQkFBQTtFQUNBLGVBQUE7QUFJRjs7QUFGQTtFQUNFLGdCQUFBO0FBS0Y7O0FBSEE7RUFDRSxjQUFBO0VBQ0EsV0FBQTtFQUNBLG9CQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0VBQ0EsZUFBQTtBQU1GOztBQUpBO0VBQ0Usc0JBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtBQU9GOztBQUxBO0VBQ0UsWUFBQTtFQUNBLHNCQUFBO0VBQ0EsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUFRRjs7QUFKQTtFQUNFLFlBQUE7RUFDQSxZQUFBO0VBQ0Esc0JBQUE7QUFPRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NlZ21lbnRzL3NlZ21lbnRzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNvbnRlbnQge1xuICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbn1cbi50ZXh0LWNvbG9yIHtcbiAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XG59XG4ucm9hZC1pZCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBjb2xvcjogeWVsbG93O1xufVxuLy8gLnByb2dyZXNzIHtcbi8vICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbi8vIH1cbi5oaWRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5zbGlkZS10aXRsZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XG4gIGNvbG9yOiAjZmZmO1xuICBwYWRkaW5nOiAxMHB4O1xuICB3aWR0aDogMTAwJTtcbiAgZm9udC1zaXplOiAxMnB4O1xuICB6LWluZGV4OiAxO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xufVxuaW1nIHtcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjY2NjO1xufVxuLmluZm8ge1xuICBjb2xvcjogI2ZmZiAhaW1wb3J0YW50O1xuICBmb250LXNpemU6IDEycHg7XG59XG4uc3BhY2Uge1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuLmRvd25sb2FkIHtcbiAgY29sb3I6IHJnYigyMzUsIDE4MiwgOSk7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LXdlaWdodDogbGlnaHRlcjtcbiAgZm9udC1zaXplOiAyOHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IDIwJTtcbn1cbi5pZnJhbWUtY29udGFpbmVyIGlmcmFtZSB7XG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogMTAwJTtcbiAgYm9yZGVyOiBub25lO1xufVxuLmlmcmFtZS1jb250YWluZXIge1xuICBoZWlnaHQ6IDk1dmg7XG4gIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAvL2JvcmRlcjogMXB4IHNvbGlkICNmMDA7XG59XG5cbi5tYWluLWlmcmFtZSB7XG4gIGZsZXgtZ3JvdzogMTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAvL2JvcmRlcjogMXB4IHNvbGlkICNmMDA7XG59XG4iXX0= */\";"]}