{"version":3,"sources":["webpack:///src/app/pages/vci-processing/vci-processing.component.scss","webpack:///src/app/pages/vci-processing/vci-processing.component.ts","webpack:///src/app/pages/vci-processing/vci-processing.module.ts","webpack:///src/app/pages/vci-processing/vci-processing.component.html"],"names":["VciProcessingComponent","storage","db","isbusy","showpercent","vci_state","processed","loadDetails","url","window","open","state","dt","_dt","substring","Vci","subscribe","val","console","log","_vci","getAll","event","file","target","files","filepath","name","task","upload","uploadPercent","percentageChanges","snapshotChanges","pipe","ref","getDownloadURL","forEach","res","updateVCI","downloadURL","error","file_url","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","vciData","processed_date","update","roundedNum","Math","round","selector","template","routes","path","component","VciProcessingModule","declarations","imports","forChild"],"mappings":"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","file":"pages-vci-processing-vci-processing-module-es5.js","sourcesContent":["export default \"ion-content {\\n  --ion-background-color: black;\\n}\\n\\n.text-color {\\n  color: white !important;\\n}\\n\\n.hide {\\n  display: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvdmNpLXByb2Nlc3NpbmcvdmNpLXByb2Nlc3NpbmcuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSw2QkFBQTtBQUNGOztBQUNBO0VBQ0UsdUJBQUE7QUFFRjs7QUFBQTtFQUNFLGFBQUE7QUFHRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3ZjaS1wcm9jZXNzaW5nL3ZjaS1wcm9jZXNzaW5nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNvbnRlbnQge1xuICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbn1cbi50ZXh0LWNvbG9yIHtcbiAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XG59XG4uaGlkZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG4iXX0= */\";","import { Component, OnInit } from \"@angular/core\";\nimport { AngularFireStorage } from \"@angular/fire/storage\";\nimport { finalize } from \"rxjs/operators\";\nimport { AddVCIModal } from \"src/providers\";\nimport { Vci } from \"../../../services/db\";\n\n@Component({\n  selector: \"app-vci-processing\",\n  templateUrl: \"./vci-processing.component.html\",\n  styleUrls: [\"./vci-processing.component.scss\"],\n})\nexport class VciProcessingComponent implements OnInit {\n  public isbusy: boolean = false;\n  public showpercent: any = \"\";\n  uploadPercent: any;\n  downloadURL: any;\n  vci_state: any = \"\";\n  processed: boolean = false;\n  _vci: any;\n\n  constructor(private storage: AngularFireStorage, private db: Vci) {}\n\n  ngOnInit(): void {\n    this.loadDetails();\n  }\n\n  // async uploadFile(event) {\n  //   // Get the file input element\n  //   const fileInput = document.getElementById(\"fileInput\");\n\n  //   // Get the selected file\n  //   const file = event.target.files[0];\n\n  //   // Create a new FormData object\n  //   const formData = new FormData();\n\n  //   // Append the file to the FormData object\n  //   formData.append(\"file\", file);\n\n  //   // Send the file to the server using an AJAX request\n  //   const xhr = new XMLHttpRequest();\n  //   xhr.open(\"POST\", \"http://localhost:9000/vci\");\n  //   xhr.onreadystatechange = () => {\n  //     if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n  //       // Create a new blob object from the response data\n  //       const blob = new Blob([xhr.response], {\n  //         type: \"application/vnd.ms-excel\",\n  //       });\n\n  //       // Create a URL for the blob\n  //       const url = window.URL.createObjectURL(blob);\n\n  //       // Create a link element and click it to download the file\n  //       const link = document.createElement(\"a\");\n  //       link.href = url;\n  //       link.download = \"updated_file.xlsx\";\n  //       document.body.appendChild(link);\n  //       link.click();\n  //       document.body.removeChild(link);\n  //     }\n  //   };\n  //   xhr.responseType = \"arraybuffer\";\n  //   xhr.send(formData);\n  // }\n\n  downloadFile(url) {\n    window.open(url, \"_blank\");\n  }\n\n  foundVCIState(state: string) {\n    if (state == \"\") {\n      this.vci_state = false;\n    } else {\n      this.vci_state = true;\n    }\n  }\n\n  public getdate(dt: string) {\n    let _dt =\n      dt.substring(0, 4) +\n      \"-\" +\n      dt.substring(4, 6) +\n      \"-\" +\n      dt.substring(6, 8) +\n      \" \" +\n      dt.substring(8, 10) +\n      \":\" +\n      dt.substring(10, 12) +\n      \":\" +\n      dt.substring(12, 14);\n    return _dt;\n  }\n\n  loadDetails() {\n    this.db.Vci.subscribe((val) => {\n      console.log(val[0]);\n      this._vci = val;\n      //this.processed = this._vci[\"processed\"];\n    });\n    this.db.getAll();\n  }\n\n  update_vci(event) {\n    const file = event.target.files[0];\n    const filepath = \"road-inspection/vci\" + `/${file.name}`;\n    this.isbusy = true;\n    //this.progessStage = \"Uploading...\";\n    this.showpercent = \"Wait...\";\n\n    try {\n      const task = this.storage.upload(filepath, file);\n      // observe percentage changes\n      this.uploadPercent = task.percentageChanges();\n\n      // get notified when the download URL is available\n      task\n        .snapshotChanges()\n        .pipe(\n          finalize(async () => {\n            this.showpercent = \"Processing...\";\n            this.downloadURL = await this.storage\n              .ref(filepath)\n              .getDownloadURL()\n              .forEach(async (res) => {\n                console.log(res);\n                await this.updateVCI(res);\n                this.isbusy = false;\n              });\n          })\n        )\n        .subscribe();\n    } catch (error) {\n      // handle the exception\n      console.error(error);\n      this.isbusy = false;\n    } finally {\n    }\n  }\n  async updateVCI(file_url) {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, \"0\");\n    const day = String(now.getDate()).padStart(2, \"0\");\n    const hours = String(now.getHours()).padStart(2, \"0\");\n    const minutes = String(now.getMinutes()).padStart(2, \"0\");\n    const seconds = String(now.getSeconds()).padStart(2, \"0\");\n\n    const dt = `${year}${month}${day}${hours}${minutes}${seconds}`;\n    let vciData: AddVCIModal = {\n      file_url: file_url,\n      processed: false,\n      processed_date: dt,\n      state: \"\",\n    };\n    await this.db.update(\"jJpNhkK1klhQm6ZUgP9M\", vciData);\n    this.showpercent = \"\";\n  }\n\n  getValue(val) {\n    const roundedNum = Math.round(val);\n    this.showpercent = \"Uploading...\" + roundedNum + \"%\";\n    return roundedNum;\n    //console.log(\"Progress: \" + roundedNum);\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { VciProcessingComponent } from \"./vci-processing.component\";\n\nconst routes: Routes = [{ path: \"\", component: VciProcessingComponent }];\n\n@NgModule({\n  declarations: [VciProcessingComponent],\n  imports: [CommonModule, RouterModule.forChild(routes)],\n})\nexport class VciProcessingModule {}\n","export default \"<ion-content #cont>\\n  <div\\n    class=\\\"container-fluid page-body-wrapper\\\"\\n    style=\\\"min-height: 100%; padding-top: 0%\\\"\\n  >\\n    <div class=\\\"main-panel-only w-100\\\">\\n      <div class=\\\"row\\\">\\n        <div\\n          *ngIf=\\\"!isbusy && !vci_state\\\"\\n          class=\\\"col-md-12 grid-margin stretch-card\\\"\\n        >\\n          <input type=\\\"file\\\" id=\\\"fileInput\\\" (change)=\\\"update_vci($event)\\\" />\\n        </div>\\n        <div class=\\\"hide\\\" *ngIf=\\\"uploadPercent | async as percent\\\">\\n          Uploading: {{ getValue(percent) }}%\\n          <ion-progress-bar [value]=\\\"percent\\\"></ion-progress-bar>\\n        </div>\\n        <div *ngIf=\\\"isbusy\\\" class=\\\"col-md-12 grid-margin stretch-card\\\">\\n          <ion-button>{{ showpercent }}</ion-button>\\n        </div>\\n\\n        <div class=\\\"col-md-12 grid-margin stretch-card\\\">\\n          <div class=\\\"table-responsive\\\" style=\\\"max-height: max-content\\\">\\n            <table class=\\\"table\\\">\\n              <thead>\\n                <tr></tr>\\n              </thead>\\n\\n              <tbody>\\n                <tr>\\n                  <td>VCI File</td>\\n                  <td *ngFor=\\\"let item of _vci\\\">\\n                    <div class=\\\"hide\\\">{{ foundVCIState(item.state) }}</div>\\n                    <ion-button\\n                      *ngIf=\\\"!item.processed && !vci_state\\\"\\n                      color=\\\"danger\\\"\\n                      >Awaiting Processing...</ion-button\\n                    >\\n                    <ion-button\\n                      *ngIf=\\\"item.processed && !vci_state\\\"\\n                      color=\\\"success\\\"\\n                      >Processed&nbsp;{{\\n                        getdate(item.processed_date)\\n                      }}</ion-button\\n                    >\\n                    <ion-button\\n                      color=\\\"warning\\\"\\n                      *ngIf=\\\"item.processed && !vci_state\\\"\\n                      (click)=\\\"downloadFile(item.file_url)\\\"\\n                      >Download VCI File</ion-button\\n                    >\\n\\n                    <ion-button color=\\\"warning\\\" *ngIf=\\\"vci_state\\\">{{\\n                      item.state\\n                    }}</ion-button>\\n                  </td>\\n                </tr>\\n              </tbody>\\n            </table>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div></ion-content\\n>\\n\";"]}